import { useEffect, useState } from "react";
import axios from "axios";
import "../assets/style/PatientsPage/addpatient.css";
import cancelButton from "../assets/images/EmployeesPage/cancelProcess.png";
import verifyButton from "../assets/images/EmployeesPage/verifyProcess.png";
import usePatientStore from "../../stores/patiendStore";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const priceCategories = [
  { id: 1, name: "A - Yüksək qiymət" },
  { id: 2, name: "B - Orta qiymət" },
  { id: 3, name: "C - Aşağı qiymət" },
];

const blacklistOptions = [
  { id: 1, name: "Problemli pasiyent" },
  { id: 2, name: "Normal pasiyent" },
];

const PatientForm = () => {
  const { editPatient } = usePatientStore();
  const [doctors, setDoctors] = useState([]);
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});
  const [formData, setFormData] = useState({
    patientId: "",
    name: "",
    surname: "",
    patronymic: "",
    finCode: "",
    genderStatus: "",
    dateOfBirth: "",
    priceCategoryStatus: "",
    specializationStatus: "",
    doctorId: null,
    isVip: false,
    isBlacklisted: false,
    blacklistCategory: "",
    phone: "",
    whatsapp: "",
    workPhone: "",
    homePhone: "",
    email: "",
    homeAddress: "",
    workAddress: "",
    recommender: "",
  });

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    let newValue = value;

    if (name === "finCode") {
      newValue = value.toUpperCase().replace(/[^A-Z0-9]/g, "");
    } else if (["phone", "workPhone", "homePhone", "whatsapp"].includes(name)) {
      newValue = formatPhoneNumber(value);
    }

    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : newValue,
    }));
  };

  const validateForm = () => {
    const newErrors = {};
    if (!formData.name) newErrors.name = "Ad tələb olunur";
    if (!formData.surname) newErrors.surname = "Soyad tələb olunur";
    if (!formData.patronymic) newErrors.patronymic = "Ata adı tələb olunur";
    if (!formData.genderStatus)
      newErrors.genderStatus = "Cinsiyyət tələb olunur";
    if (!formData.priceCategoryStatus)
      newErrors.priceCategoryStatus = "Qiymət kateqoriyası tələb olunur";
    if (!formData.doctorId) newErrors.doctorId = "Həkimi seçin";

    const phoneRegex = /^\(\d{3}\)-\d{3}-\d{4}$/;
    if (!formData.phone) newErrors.phone = "Mobil nömrə tələb olunur";
    else if (!phoneRegex.test(formData.phone))
      newErrors.phone = "Nömrə formatı (XXX)-XXX-XXXX şəklində olmalıdır";

    if (formData.workPhone && !phoneRegex.test(formData.workPhone))
      newErrors.workPhone = "Nömrə formatı (XXX)-XXX-XXXX şəklində olmalıdır";
    if (formData.homePhone && !phoneRegex.test(formData.homePhone))
      newErrors.homePhone = "Nömrə formatı (XXX)-XXX-XXXX şəklində olmalıdır";
    if (formData.whatsapp && !phoneRegex.test(formData.whatsapp))
      newErrors.whatsapp = "Nömrə formatı (XXX)-XXX-XXXX şəklində olmalıdır";

    if (!formData.finCode) newErrors.finCode = "Fin kodu tələb olunur";
    else if (!/^[A-Z0-9]{7}$/.test(formData.finCode))
      newErrors.finCode =
        "FIN kod yəlni böyük hərflər və rəqəmlərdən ibarət 7 simvol olmalıdır";

    if (formData.isBlacklisted && !formData.blacklistCategory)
      newErrors.blacklistCategory = "Qara siyahı kateqoriyası seçin";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const formatPhoneNumber = (phone) => {
    const cleaned = phone.replace(/\D/g, "");
    if (cleaned.length !== 10) return phone;
    return `(${cleaned.slice(0, 3)})-${cleaned.slice(3, 6)}-${cleaned.slice(
      6
    )}`;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) {
      toast.error("Zəhmət olmasa bütün məcburi xanaları doldurun.");
      return;
    }
    setLoading(true);

    const dataToSend = {
      patientId: formData.patientId,
      name: formData.name,
      surname: formData.surname,
      patronymic: formData.patronymic,
      finCode: formData.finCode,
      genderStatus: formData.genderStatus,
      dateOfBirth: formData.dateOfBirth,
      priceCategoryStatus: formData.isVip
        ? "Vip"
        : formData.priceCategoryStatus,
      specializationStatus: formData.specializationStatus,
      doctorId: formData.doctorId,
      phone: formData.phone,
      workPhone: formData.workPhone,
      homePhone: formData.homePhone,
      email: formData.email,
      homeAddress: formData.homeAddress,
      workAddress: formData.workAddress,
    };
    try {
      const response = await axios.put(
        `${import.meta.env.VITE_BASE_URL}/patient/update`,
        dataToSend
      );
      toast.success("Pasiyent məlumatları uğurla yeniləndi!");
    } catch (err) {
      console.error("Xəta baş verdi:", err.response?.data || err.message);
      toast.error("Xəta baş verdi. Məlumatları yoxlayın.");
    } finally {
      setLoading(false);
    }
  };


  useEffect(() => {
    const fetchDoctors = async () => {
      try {
        const response = await axios.get(
          "http://159.89.3.81:5555/api/v1/general-calendar/read-doctors"
        );
        setDoctors(response.data);
      } catch (error) {
        console.error("Doktorları alarkən xəta:", error);
        alert("Doktor məlumatları yüklənərkən xəta baş verdi");
      }
    };
    fetchDoctors();
  }, []);

  useEffect(() => {
    if (editPatient) {
      setFormData({
        patientId: editPatient.patientId || "",
        name: editPatient.name || "",
        surname: editPatient.surname || "",
        patronymic: editPatient.patronymic || "",
        finCode: editPatient.finCode || "",
        genderStatus: editPatient.genderStatus || "",
        dateOfBirth: editPatient.dateOfBirth || "",
        priceCategoryStatus: editPatient.priceCategoryStatus || "",
        specializationStatus: editPatient.specializationStatus || "",
        doctorId: editPatient.doctorId || null,
        isVip: editPatient.priceCategoryStatus === "Vip",
        isBlacklisted: false,
        blacklistCategory: "",
        phone: editPatient.phone || "",
        whatsapp: "",
        workPhone: editPatient.workPhone || "",
        homePhone: editPatient.homePhone || "",
        email: editPatient.email || "",
        homeAddress: editPatient.homeAddress || "",
        workAddress: editPatient.workAddress || "",
        recommender: "",
      });
    }
  }, [editPatient]);
  console.log("Yollanan məlumatlar:", formData);

  return (
    <form onSubmit={handleSubmit}>
      <div className="patientsGroupWrapper">
        <form onSubmit={handleSubmit} className="patientsGroupContainer">
          <div className="patientsGroupLeft">
            
            {/* Name Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">
                Adı <span className="patientsGroupRequired">*</span>
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="patientsGroupInputText"
              />
              {errors.name && (
                <span className="error-message">{errors.name}</span>
              )}
            </div>

            {/* Surname Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">
                Soyadı <span className="patientsGroupRequired">*</span>
              </label>
              <input
                type="text"
                name="surname"
                value={formData.surname}
                onChange={handleChange}
                className="patientsGroupInputText"
              />
              {errors.surname && (
                <span className="error-message">{errors.surname}</span>
              )}
            </div>

            {/* Patronymic Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">
                Ata adı <span className="patientsGroupRequired">*</span>
              </label>
              <input
                type="text"
                name="patronymic"
                value={formData.patronymic}
                onChange={handleChange}
                className="patientsGroupInputText"
              />
              {errors.patronymic && (
                <span className="error-message">{errors.patronymic}</span>
              )}
            </div>

            {/* Fin Code Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">
                Fin kodu <span className="patientsGroupRequired">*</span>
              </label>
              <input
                type="text"
                name="finCode"
                value={formData.finCode}
                onChange={handleChange}
                maxLength={7}
                className="patientsGroupInputText"
              />
              {errors.finCode && (
                <span className="error-message">{errors.finCode}</span>
              )}
            </div>

            {/* Gender Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">
                Cinsiyyət <span className="patientsGroupRequired">*</span>
              </label>
              <div className="patientsGroupGender">
                <label>
                  <input
                    type="radio"
                    name="genderStatus"
                    value="MAN"
                    checked={formData.genderStatus === "MAN"}
                    onChange={handleChange}
                    className="patientsGroupCheckbox"
                  />{" "}
                  Kişi
                </label>
                <label>
                  <input
                    type="radio"
                    name="genderStatus"
                    value="WOMAN"
                    checked={formData.genderStatus === "WOMAN"}
                    onChange={handleChange}
                    className="patientsGroupCheckbox"
                  />{" "}
                  Qadın
                </label>
              </div>
              {errors.genderStatus && (
                <span className="error-message">{errors.genderStatus}</span>
              )}
            </div>

            {/* Date of Birth Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">Doğum tarixi</label>
              <input
                type="date"
                name="dateOfBirth"
                value={formData.dateOfBirth}
                onChange={handleChange}
                className="patientsGroupInputDate"
              />
            </div>

            {/* Price Category Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">
                Qiymət kateqoriyası{" "}
                <span className="patientsGroupRequired">*</span>
              </label>
              <select
                name="priceCategoryStatus"
                value={formData.priceCategoryStatus}
                onChange={handleChange}
                className="patientsGroupSelect">
                <option value="">seçin</option>
                {priceCategories.map((category) => (
                  <option key={category.id} value={category.id}>
                    {category.name}
                  </option>
                ))}
              </select>
              {errors.priceCategoryStatus && (
                <span className="error-message">
                  {errors.priceCategoryStatus}
                </span>
              )}
            </div>

            {/* Specialization Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">İxtisası</label>
              <input
                type="text"
                name="specializationStatus"
                value={formData.specializationStatus}
                onChange={handleChange}
                className="patientsGroupInputText"
              />
            </div>

            {/* Doctor Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">
                Həkim <span className="patientsGroupRequired">*</span>
              </label>
              <select
                name="doctorId"
                value={formData.doctorId || ""}
                onChange={handleChange}
                className="patientsGroupSelect">
                <option value="">Həkim seçin</option>
                {doctors.map((doctor) => (
                  <option key={doctor.doctorId} value={doctor.doctorId}>
                    {doctor.name} {doctor.surname}
                  </option>
                ))}
              </select>
              {errors.doctorId && (
                <span className="error-message">{errors.doctorId}</span>
              )}
            </div>

            {/* VIP Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">VIP</label>
              <input
                type="checkbox"
                name="isVip"
                checked={formData.isVip}
                onChange={handleChange}
                className="patientsGroupCheckbox"
              />
            </div>

            {/* Blacklist Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">Qara siyahı</label>
              <div className="patientsGroupBlacklist">
                <input
                  type="checkbox"
                  name="isBlacklisted"
                  checked={formData.isBlacklisted}
                  onChange={handleChange}
                  className="patientsGroupCheckbox"
                />
                <select
                  name="blacklistCategory"
                  value={formData.blacklistCategory}
                  onChange={handleChange}
                  className="patientsGroupBlacklistSelect"
                  disabled={!formData.isBlacklisted}>
                  <option value="">seçin</option>
                  {blacklistOptions.map((option) => (
                    <option key={option.id} value={option.id}>
                      {option.name}
                    </option>
                  ))}
                </select>
              </div>
              {errors.blacklistCategory && (
                <span className="error-message">
                  {errors.blacklistCategory}
                </span>
              )}
            </div>
          </div>

          <div className="patientsGroupRight">
            {/* Phone Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">
                Mobil nömrə 1 <span className="patientsGroupRequired">*</span>
              </label>
              <input
                type="text"
                name="phone"
                value={formData.phone}
                onChange={handleChange}
                className="patientsGroupInputText"
                placeholder="(XXX)-XXX-XXXX"
              />
              {errors.phone && (
                <span className="error-message">{errors.phone}</span>
              )}
            </div>

            {/* WhatsApp Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">Whatsapp</label>
              <input
                type="text"
                name="whatsapp"
                value={formData.whatsapp}
                onChange={handleChange}
                className="patientsGroupInputText"
                placeholder="(XXX)-XXX-XXXX"
              />
              {errors.whatsapp && (
                <span className="error-message">{errors.whatsapp}</span>
              )}
            </div>

            {/* Work Phone Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">İş nömrəsi</label>
              <input
                type="text"
                name="workPhone"
                value={formData.workPhone}
                onChange={handleChange}
                className="patientsGroupInputText"
                placeholder="(XXX)-XXX-XXXX"
              />
              {errors.workPhone && (
                <span className="error-message">{errors.workPhone}</span>
              )}
            </div>

            {/* Home Phone Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">Ev nömrəsi</label>
              <input
                type="text"
                name="homePhone"
                value={formData.homePhone}
                onChange={handleChange}
                className="patientsGroupInputText"
                placeholder="(XXX)-XXX-XXXX"
              />
              {errors.homePhone && (
                <span className="error-message">{errors.homePhone}</span>
              )}
            </div>

            {/* Email Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">E-poçt</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                className="patientsGroupInputText"
              />
            </div>

            {/* Home Address Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">Ev ünvanı</label>
              <input
                type="text"
                name="homeAddress"
                value={formData.homeAddress}
                onChange={handleChange}
                className="patientsGroupInputText"
              />
            </div>

            {/* Work Address Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">İş ünvanı</label>
              <input
                type="text"
                name="workAddress"
                value={formData.workAddress}
                onChange={handleChange}
                className="patientsGroupInputText"
              />
            </div>

            {/* Recommender Field */}
            <div className="patientsGroupField">
              <label className="patientsGroupLabel">Tövsiyə edən şəxs</label>
              <input
                type="text"
                name="recommender"
                value={formData.recommender}
                onChange={handleChange}
                className="patientsGroupInputText"
              />
            </div>
          </div>
        </form>

        <div className="submitAddPatientForm">
          <button
            type="button"
            className="addPatientCancelButton"
            onClick={() => {
              // Reset form on cancel
              setFormData({
                name: "",
                surname: "",
                patronymic: "",
                finCode: "",
                genderStatus: "",
                dateOfBirth: "",
                priceCategoryStatus: "",
                specializationStatus: "",
                doctorId: null,
                isVip: false,
                isBlacklisted: false,
                blacklistCategory: "",
                phone: "",
                whatsapp: "",
                workPhone: "",
                homePhone: "",
                email: "",
                homeAddress: "",
                workAddress: "",
                recommender: "",
              });
              setErrors({});
            }}>
            <img
              src={cancelButton || "/placeholder.svg"}
              className="addPatientCancelBTN"
              alt="Cancel"
            />
            İmtina et
          </button>
          <button
            type="submit"
            onClick={handleSubmit}
            className="addPatientVerifyButton"
            disabled={loading}>
            <img
              src={verifyButton || "/placeholder.svg"}
              className="addPatientVerifyBTN"
              alt="Save"
            />
            {loading ? (
              <>
                <span className="loading-spinner"></span>
                Yüklənir...
              </>
            ) : (
              "Yadda saxla"
            )}
          </button>
        </div>
      </div>
    </form>
  );
};

export default PatientForm;
