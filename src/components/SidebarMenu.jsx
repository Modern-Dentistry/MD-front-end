import React, { useState } from 'react';
import { IoIosArrowBack, IoIosArrowForward, IoIosArrowDown, IoIosArrowForward as IoIosChevronRight } from 'react-icons/io';
import { Link, useLocation } from 'react-router-dom';
import '../assets/style/sidebar-menu.css';
import mdLogo from '../assets/images/md-logo.svg';

// React komponentl…ôri olan SVG ikonlarƒ± import ed…ôk
import DoctorIcon from './sidebar-icons/DoctorIcon.jsx';
import CalendarIcon from './sidebar-icons/CalendarIcon.jsx';
import PatientsIcon from './sidebar-icons/PatientsIcon.jsx';
import WorkDoneIcon from './sidebar-icons/WorkDoneIcon.jsx';
import LaboratoryIcon from './sidebar-icons/LaboratoryIcon.jsx';
import WarehouseIcon from './sidebar-icons/WarehouseIcon.jsx';
import SettingsIcon from './sidebar-icons/SettingsIcon.jsx';

const SidebarMenu = () => {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [expandedItems, setExpandedItems] = useState([]);
  const location = useLocation(); // Cari s…ôhif…ô yolunu …ôld…ô etm…ôk √º√ß√ºn

  // URL-…ô uyƒüun olan menyunun aktiv v…ôziyy…ôt…ô g…ôtirilm…ôsi
  React.useEffect(() => {
    const currentPath = location.pathname;
    // Alt elementd…ô aktiv s…ôhif…ô var mƒ± yoxlayƒ±rƒ±q
    menuItems.forEach(item => {
      const hasActiveChild = item.children.some(child => child.path === currentPath);
      if (hasActiveChild && !expandedItems.includes(item.id)) {
        setExpandedItems(prev => [...prev, item.id]);
      }
    });
  }, [location.pathname]);

  // Ana elementl…ôrin m…ôlumatlarƒ± - funksiya il…ô
  const menuItems = [
    {
      id: 1,
      title: 'ƒ∞≈ü√ßil…ôr',
      icon: (isActive) => <DoctorIcon width={20} height={20} stroke={isActive ? "#fff" : "#155EEF"} />,
      children: [
        { id: 11, title: 'ƒ∞≈ü√ßil…ôrin siyahƒ±sƒ±', path: '/employees-list' },
        { id: 12, title: 'ƒ∞≈ü√ßil…ôrin i≈ü qrafiki', path: '/employee-schedule' },
        { id: 13, title: 'Yeni i≈ü√ßi …ôlav…ô et', path: '/add-user' }
      ]
    },
    {
      id: 2,
      title: '√úmumi t…ôqvim',
      path: '/calendar',
      icon: (isActive) => <CalendarIcon width={20} height={20} stroke={isActive ? "#fff" : "#155EEF"} />,
      children: [
        { id: 21, title: 'B√ºt√ºn Randevular', path: '/appointments' },
        { id: 22, title: 'Yeni Randevu', path: '/add-new-appointment' }
      ]
    },
    {
      id: 3,
      title: 'Pasiyentl…ôr',
      path: '/patients',
      icon: (isActive) => <PatientsIcon width={20} height={20} stroke={isActive ? "#fff" : "#155EEF"} />,
      children: [
        { id: 31, title: 'Pasiyent Siyahƒ±sƒ±', path: '/' },
        { id: 32, title: 'Yeni Pasiyent', path: '/' }
      ]
    },
    {
      id: 4,
      title: 'G√∂r√ºlm√º≈ü i≈ül…ôr',
      path: '/work-done',
      icon: (isActive) => <WorkDoneIcon width={20} height={20} stroke={isActive ? "#fff" : "#155EEF"} />,
      children: [
        { id: 41, title: 'H…ôkim Siyahƒ±sƒ±', path: '/' },
        { id: 42, title: 'Yeni H…ôkim',  path: '/new-patient' }
      ]
    },
    {
      id: 5,
      title: 'Laboratoriya',
      path: '/laboratory',
      icon: (isActive) => <LaboratoryIcon width={20} height={20} stroke={isActive ? "#fff" : "#155EEF"} />,
      children: [
        { id: 51, title: 'Otaq Siyahƒ±sƒ±', path: '/' },
        { id: 52, title: 'Yeni Otaq', path: '/' }
      ]
    },
    {
      id: 6,
      title: 'Anbar …ôm…ôliyyatlarƒ±',
      path: '/warehouse',
      icon: (isActive) => <WarehouseIcon width={20} height={20} stroke={isActive ? "#fff" : "#155EEF"} />,
      children: [
        { id: 61, title: '∆èm…ôliyyat Siyahƒ±sƒ±', path: '/' },
        { id: 62, title: 'Yeni ∆èm…ôliyyat', path: '/' }
      ]
    },
    {
      id: 7,
      title: 'T…ônziml…ôm…ôl…ôr',
      path: '/settings',
      icon: (isActive) => <SettingsIcon width={20} height={20} stroke={isActive ? "#fff" : "#155EEF"} />,
      children: [
        { id: 71, title: 'G…ôlirl…ôr', path: '/' },
        { id: 72, title: 'X…ôrcl…ôr', path: '/' }
      ]
    },
    {
      id: 8,
      title: '√áƒ±xƒ±≈ü',
      icon: 'üö™',
      children: []
    }
  ];

  // Sidebar-ƒ± yƒ±ƒümaq/a√ßmaq √º√ß√ºn funksiya
  const toggleSidebar = () => {
    setIsCollapsed(!isCollapsed);
  };

  // Alt elementl…ôri a√ßƒ±b-baƒülamaq √º√ß√ºn funksiya
  const toggleItem = (itemId) => {
    setExpandedItems(prev => 
      prev.includes(itemId) 
        ? prev.filter(id => id !== itemId)
        : [...prev, itemId]
    );
  };
  // Elementin aktiv olub olmadƒ±ƒüƒ±nƒ± yoxlayan funksiya
  const isActive = (path) => location.pathname === path;
  return (
    <div className={`sidebar-menu ${isCollapsed ? 'collapsed' : ''}`}>
      {/* Logo v…ô yƒ±ƒüma/a√ßma d√ºym…ôsi */}
      <div className="sidebar-header">
        {!isCollapsed && <img src={mdLogo} alt="MD Logo" className="logo-image" />} 
        <button className="toggle-button" onClick={toggleSidebar}>
          {isCollapsed ? <IoIosArrowForward /> : <IoIosArrowBack />}
        </button>
      </div>

      {/* Menu elementl…ôri */}
      <div className="menu-items">
        {menuItems.map(item => {
          // ƒ∞tem aktiv v…ôziyy…ôtd…ô olub olmadƒ±ƒüƒ±nƒ± t…ôyin edirik
          const isItemActive = expandedItems.includes(item.id);
          // Ana element √∂z√º aktiv mi?
          const isItemPathActive = isActive(item.path);
          // Alt elementl…ôr arasƒ±nda aktiv olan varmƒ±?
          const hasActiveChild = item.children.some(child => isActive(child.path));
          
          return (
            <div key={item.id} className="menu-item">
              <div 
                className={`menu-item-header ${isItemPathActive || hasActiveChild ? 'active' : ''}`}
                onClick={() => item.children.length > 0 && toggleItem(item.id)}
              >
                <span className={`menu-item-icon ${(isItemActive || isItemPathActive || hasActiveChild) ? 'active' : ''}`}>
                  {typeof item.icon === 'function' ? item.icon(isItemActive || isItemPathActive || hasActiveChild) : item.icon}
                </span>
                {!isCollapsed && (
                  <>
                    <span className="menu-item-title">{item.title}</span>
                    {item.children.length > 0 && (
                      <IoIosArrowDown 
                        className={`arrow-icon ${expandedItems.includes(item.id) ? 'rotated' : ''}`}
                      />
                    )}
                  </>
                )}
              </div>
              
              {/* Alt elementl…ôr */}
              {!isCollapsed && expandedItems.includes(item.id) && item.children.length > 0 && (
                <div className="submenu">
                  {item.children.map(child => {
                    const isChildActive = isActive(child.path);
                    
                    return (
                      <Link 
                        key={child.id} 
                        to={child.path} 
                        className={`submenu-item ${isChildActive ? 'active' : ''}`}
                      >
                        {isChildActive && (
                          <IoIosChevronRight className="submenu-active-indicator" />
                        )}
                        {/* <span className={`submenu-item-icon ${isChildActive ? 'active' : ''}`}>
                          {child.icon}
                        </span> */}
                        <span className="submenu-item-title">{child.title}</span>
                      </Link>
                    );
                  })}
                </div>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default SidebarMenu;